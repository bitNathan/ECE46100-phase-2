#!/bin/bash

# Go into the backend folder
cd backend || { echo "Failed to navigate to 'backend'."; exit 1; }

# Check for the first argument (the command)
case "$1" in
    # Install dependencies
    "install")
        npm_out=$(npm install 2>&1)
        if [ $? -ne 0 ]; then
            echo "Error installing dependencies."
            exit 1
        fi

        # Regex to find the number of packages installed successfully
        num_dependencies=$(echo "$npm_out" | grep -oE 'added [0-9]+' | awk '{print $2}')

        if [ -n "$num_dependencies" ]; then
            echo "$num_dependencies dependencies installed..."
        else
            echo "Dependencies are fully up to date."
        fi

        exit 0
        ;;

    # Run tests
    "test")
        # Ensure jest_output.txt is removed upon script exit
        trap 'rm -f jest_output.txt' EXIT

        # Compile and build the project
        npm run -s build

        # Run tests and redirect output to jest_output.txt
        npm test -s > jest_output.txt 2>&1
        test_exit_code=$?

        total_tests=$(grep 'Tests:' jest_output.txt | grep -oP '[0-9]+(?= total)')
        passed_tests=$(grep 'Tests:' jest_output.txt | grep -oP '[0-9]+(?= passed)')

        # Extract coverage percentage and convert it to an integer
        coverage_percent=$(grep 'All files' jest_output.txt | awk -F '|' '{print $5}' | tr -d ' %')
        coverage_percent=${coverage_percent%.*}  # Remove decimal if present

        # Print the results
        echo "Total: $total_tests"
        echo "Passed: $passed_tests"
        echo "Coverage: ${coverage_percent}%"
        echo "$passed_tests/$total_tests test cases passed. ${coverage_percent}% line coverage achieved."

        if [ $test_exit_code -eq 0 ]; then
            exit 0
        else
            echo "Tests failed."
            exit 1
        fi
        ;;

    # Default: Analyze the URLs provided in the URL_FILEPATH
    *)
        # Compile and build the project
        npm run -s build

        if [ -f "$1" ]; then
            URL_FILE=$1

            # Call the CLI tool to analyze each repository and output NDJSON format
            node ./dist/cli.js analyze "$URL_FILE" | tee analysis_output.ndjson

            if [ $? -eq 0 ]; then
                exit 0
            else
                echo "Error during analysis."
                exit 1
            fi
        else
            echo "File not found: $1"
            exit 1
        fi
        ;;
esac
