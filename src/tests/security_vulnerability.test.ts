import axios from 'axios';
import { getSecurityVulnerabilities } from '../security_vulnerability';
import logger from '../logger';

// Mocking the axios library
jest.mock('axios');
const mockedAxios = axios as jest.Mocked<typeof axios>;

describe('Security Vulnerability Metric', () => {
    beforeEach(() => {
        // Reset all mocks before each test
        jest.clearAllMocks();
    });

    it('should return correct vulnerability count and latency when data is available', async () => {
        // Mock the GitHub API response for vulnerabilities
        const mockedResponse = {
            data: [
                { id: 1, severity: 'high' },
                { id: 2, severity: 'low' }
            ]
        };
        mockedAxios.get.mockResolvedValue(mockedResponse);

        const start = Date.now();
        const [vulnerabilities, latency] = await getSecurityVulnerabilities('mockOwner', 'mockRepo');
        const timeTaken = (Date.now() - start) / 1000;

        // Check if the result is correct
        expect(vulnerabilities).toBe(2);  // We expect 2 vulnerabilities based on mock data
        expect(latency).toBeLessThanOrEqual(timeTaken);  // Check that the latency is reasonable

        // Verify that axios was called with the correct URL
        expect(mockedAxios.get).toHaveBeenCalledWith(
            'https://api.github.com/repos/mockOwner/mockRepo/vulnerability-alerts',
            { headers: { 'Accept': 'application/vnd.github.dorian-preview+json' } }
        );
    });

    it('should return 0 vulnerabilities and correct latency when no vulnerabilities are found', async () => {
        // Mock the GitHub API response to return an empty list of vulnerabilities
        const mockedResponse = { data: [] };
        mockedAxios.get.mockResolvedValue(mockedResponse);

        const start = Date.now();
        const [vulnerabilities, latency] = await getSecurityVulnerabilities('mockOwner', 'mockRepo');
        const timeTaken = (Date.now() - start) / 1000;

        // Check if the result is correct
        expect(vulnerabilities).toBe(0);  // No vulnerabilities
        expect(latency).toBeLessThanOrEqual(timeTaken);  // Check that the latency is reasonable
    });

    it('should log an error and return 0 vulnerabilities if the API call fails', async () => {
        // Mock the GitHub API response to throw an error
        const mockError = new Error('API request failed');
        mockedAxios.get.mockRejectedValue(mockError);

        const loggerSpy = jest.spyOn(logger, 'error');

        const start = Date.now();
        const [vulnerabilities, latency] = await getSecurityVulnerabilities('mockOwner', 'mockRepo');
        const timeTaken = (Date.now() - start) / 1000;

        // Check if the result is correct
        expect(vulnerabilities).toBe(0);  // No vulnerabilities due to failure
        expect(latency).toBeLessThanOrEqual(timeTaken);  // Check that the latency is reasonable

        // Verify that the error was logged
        expect(loggerSpy).toHaveBeenCalledWith('Error fetching security vulnerabilities for mockOwner/mockRepo: API request failed');
    });
});
